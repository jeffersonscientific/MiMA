# template for the Intel fortran compiler version 8
# Platform: Stanford Earth, Mazama HPC (copied from .nyu template)
#
# TODO: use nf-config (fortran) and nc-config (c) to get the netcdf configurations for compilation aka,:
# can we get the MPI flags from a config?
# if we are loading our own NetCDF, we'll need to append the appropriate PATH, etc. variables first.
# FFLAGS = ${DEBUG} `nf-config --fflags` `nc-config --fflags` -I${MPI_DIR}/include
#
# TODO: does this get executed like a script (probably as a csh script), or is it just a template?
#   shell programs can be executed to set variables like:
#   $ NETCDF_INC := $(shell nc-config --fflags)
#
# yoder:
# variables we will need:
# NOTES: Windows uses INCLUDE; *nix uses: CPATH (C/C++), C_INCLUDE_PATH (C),
#   and/or CPLUS_INCLUDE_PATH. usually just CPATH.
# NetCDF modules typically set NETCDF_{FORTRAN}_{DIR, BIN, LIB, INC} and
#  append to PATH, INCLUDE, LD_LIBRARY_PATH
#
# eventually, we want to build modules for this and/or get Kilian to install OpenHPC ;-) . For now, let's just
#  set variables old-school:
#
# base directories:
# NETCDF_DIR = $SCRATCH/.local/intel/19.1.0.166/netcdfc/4.7.3
# NETCDF_FORTRAN_DIR=$SCRATCH/.local/intel/19.1.0.166/netcdff/4.5.2
# HDF5_DIR=$SCRATCH/.local/intel/19.1.0.166/hdf5/1.10.6
# ZLIB_DIR=$SCRATCH/.local/intel/19.1.0.166/zlib/1.2.11
# CURL_DIR=$SCRATCH/.local/intel/19.1.0.166/curl/7.68.0
#
# impi sets this variable; MPI_DIR is also a common variable name, but same idea.
# MPI_DIR=$I_MPI_ROOT
#
#NETCDF_LIB=${NETCDF_DIR}/lib

#LIB_NETCDF=${NETCDF_LIB}
#CPATH=${INCLUDE}:${MPI_DIR}/include:CPATH
#
# yoder:
#
# note that our NetCDF-c and NetCDF-fortran paths are separate.
# it is possible that NetCDF things can get confused if they expect NetCDF-C
#   and NetCDF-Fortran components to be in the same place. appending to PATH,
#   INCLUDE/CPATH, and LD_LIBRARY_PATH should handle those problems. Otherwise,
#   add NETCDF_DIR, NETCDF_FORTRAN_LIB, NETCDF_FORTRAN_INC (set in the
#   netcdf-fortran module script) as needed.
#
# typical use with mkmf
# mkmf -t template.ifc -c"-Duse_libMPI -Duse_netCDF" path_names /usr/local/include
# yoder:
FFLAGS = ${DEBUG} -fpp -stack_temps -safe_cray_ptr -ftz -assume byterecl -i4 -r8 -g ${MIMA_CONFIG_FFLAGS}
#
#
OPT = -O2 -xSSE4.2 -axAVX
OPT = -O2
#OPT = -O1 
#OPT = -O0

FFLAGS += ${OPT}
#
# yoder:
# TODO: move these nc/pkg-config sub-scripts up and export into variables, so the following line(s) are not
#  changed; all the changing happens up top (so like MPI_CFLAGS=`pkg-config --cflags ompi` )
CPPFLAGS=-I/usr/include -I/usr/local/include ${MIMA_CONFIG_CFLAGS}

#CPPFLAGS=-I/usr/include -I/usr/local/include `nc-config --cflags` `nf-config --cflags `pkg-config --cflags ompi` `pkg-config --cflags ompi-fort` -I${HDF5_INC}

#CPPFLAGS =  -I/usr/include -I/usr/local/include -I${NETCDF_INC} -I${MPI_DIR}/include #-I/usr/mpi/intel/mvapich-1.1.0/include
#CPPFLAGS =  -I/usr/include -I/usr/local/include -I${NETCDF_INC}  -I${MVAPICH2_INC} #-I/usr/mpi/intel/mvapich-1.1.0/include

CC = icc
FC = ifort
LD = ifort
#FC = mpif90
#LD = mpif90
CXX = icpc
#
# MPI compilers:
MPICC = mpiicc
MPIFC = mpiifort
MPILD = mpiifort
MPICXX = mpiicpc
#FC = mpif90
#LD = mpif90

#LDFLAGS = -shared-intel -L/usr/local/lib -L${LIB_NETCDF}
# yoder:
LDFLAGS = -shared-intel -L/usr/local/lib -L${NETCDF_LIB} -L${NETCDF_FORTRAN_LIB} -lnetcdf -lnetcdff
#
# something in this breaks (getting an error like, "variable name must start with a letter"). we need a simpler string. the above appears to work.
#   generally, efforts for a comprehensive, semi-automated approach to construct the -L, -I tags from *-config calls probably 1) is overkill anyway, and
#   2) breaks mkmf. One approach that might work is to do the same basic construction of MIMA_CONFIG_LDFLAGS, but use the L-only and l-only options.
#LDFLAGS = ${MIMA_CONFIG_LDFLAGS}

#
CFLAGS = -D__IFC
